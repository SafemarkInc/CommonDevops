parameters:
- name: buildProjectPath
  type: string
- name: testProjectPath
  type: string
  default: ''
- name: terraformPath
  type: string
- name: terraformMainResource
  type: string
- name: webappDeploymentFile
  type: string
  default: ''
- name: terraformWebappName
  type: string
  default: ''
- name: functionDeploymentFile
  type: string
  default: ''
- name: terraformFunctionName
  type: string
  default: ''

steps:
- powershell: |
    if (('${{ parameters.webappDeploymentFile }}'.Length -eq 0) -ne ('${{ parameters.terraformWebappName }}'.Length -eq 0)) {
        throw "Either specify webappDeploymentFile and terraformWebappName or don't specify either."
    }

    if (('${{ parameters.functionDeploymentFile }}'.Length -eq 0) -ne ('${{ parameters.terraformFunctionName }}'.Length -eq 0)) {
        throw "Either specify functionDeploymentFile and terraformFunctionName or don't specify either."
    }

    $dir = "$($Env:SYSTEM_TEAMPROJECT)/${{ parameters.buildProjectPath }}"
    Write-Host $dir
    ls $dir
    pwd
  displayName: Validate pipeilne parameters

- bash:  |
    echo '${{ variables.SYSTEM_TEAMPROJECT }}/${{ parameters.buildProjectPath }}'
    printenv

- task: UseDotNet@2 
  displayName: ".NET Core 6.0.x"
  inputs:
    version: '6.0.x'

- script: dotnet test "%SYSTEM_TEAMPROJECT%\${{ parameters.testProjectPath }}"
  condition: ne('${{ parameters.testProjectPath }}', '')
  displayName: dotnet test

- task: DotNetCoreCLI@2
  displayName: dotnet publish
  inputs:
    command: publish
    projects: '${{ variables.SYSTEM_TEAMPROJECT }}/${{ parameters.buildProjectPath }}'
#    projects: '${{ var.SYSTEM_TEAMPROJECT }}/${{ parameters.buildProjectPath }}'
#    projects: '${{ SYSTEM_TEAMPROJECT }}/${{ parameters.buildProjectPath }}'
#    projects: '%SYSTEM_TEAMPROJECT%/${{ parameters.buildProjectPath }}'
#    projects: '$($env:SYSTEM_TEAMPROJECT)/${{ parameters.buildProjectPath }}'
#    projects: '$(SYSTEM_TEAMPROJECT)/${{ parameters.buildProjectPath }}'
#    projects: '$SYSTEM_TEAMPROJECT/${{ parameters.buildProjectPath }}'
#     projects: 'IoT-DataStream-Processing/${{ parameters.buildProjectPath }}'
    publishWebProjects: ${{ length(parameters.webappDeploymentFile) }}
    arguments: '--configuration Release --output Publish'
    zipAfterPublish: True

- powershell: |
    $ProjectDir = ${Env:BUILD_REPOSITORY_NAME}.Split("/")[1]
    New-Item -Name deploy -ItemType "Directory"
    $DeployScript = Get-Content .\CommonDevops\deploy.ps1
    $DeployScript = ,('$BuildNumber = "' + $Env:BUILD_BUILDNUMBER + '"') + $DeployScript
    $DeployScript = ,('$BuildDate = "' + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss") + '"') + $DeployScript
    $DeployScript = ,('$MainResourceName = "${{ parameters.terraformMainResource }}"') + $DeployScript
    $DeployScript = ,('$WebappName = "${{ parameters.terraformWebappName }}"') + $DeployScript
    $DeployScript | Out-File ./deploy/deploy.ps1
    Copy-Item -Path "$ProjectDir\${{ parameters.terraformPath }}" -Destination "./deploy" -Recurse -Verbose
    New-Item "./deploy/CommonDevops" -ItemType Directory
    Copy-Item -Path "./CommonDevops/US" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item -Path "./CommonDevops/China" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item -Path "./CommonDevops/Korea" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item "./CommonDevops/_terraform_init.ps1" -Destination "./deploy/CommonDevops"
    Copy-Item "./CommonDevops/common.tf" -Destination "./deploy/CommonDevops"
    Copy-Item -Path "Publish/*" -Destination "./deploy"
  displayName: Assemble the deployment package
  
- publish: ./deploy
  displayName: Publish artifact
  artifact: deploy
