parameters:
- name: buildProjectPath
  type: string
- name: testProjectPath
  type: string
  default: ''
- name: terraformMainResource
  type: string
- name: terraformWebappName
  type: string
  default: ''
- name: terraformFunctionName
  type: string
  default: ''
- name: efcoreDbContext
  type: string
  default: ''
- name: efcoreTerraformDbName
  type: string
  default: ''

steps:
- powershell: |
    $efcoreDbContext = '${{ parameters.efcoreDbContext }}'
    $efcoreTerraformDbName = '${{ parameters.efcoreTerraformDbName }}'
    if (($efcoreDbContext -eq '') -ne ($efcoreTerraformDbName -eq '')) {
      throw '''efcoreDbContext'' and ''efcoreTerraformDbName'' parameters need to either both exist or both be omitted.'
    }
  failOnStderr: true
  displayName: Validate Pipeline Parameters

- task: UseDotNet@2
  displayName: ".NET Core 6.0.x"
  inputs:
    version: '6.0.x'

- script: dotnet test "${{ split(variables['Build.Repository.Name'],'/')[1] }}/${{ parameters.testProjectPath }}"
  condition: ne('${{ parameters.testProjectPath }}', '')
  displayName: dotnet test

# https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/dotnet-core-cli-v2?view=azure-pipelines
# If [publishWebProjects] is set to true, the projects property value is skipped, and the task tries to find the web
# projects in the repository and run the publish command on them.
#
# We want to specify which projects to build instead of searching and building all of them.
- task: DotNetCoreCLI@2
  displayName: dotnet publish
  inputs:
    command: publish
    projects: "${{ split(variables['Build.Repository.Name'],'/')[1] }}/${{ parameters.buildProjectPath }}"
    publishWebProjects: false
    arguments: '--configuration Release --output Publish'
    zipAfterPublish: True

- script: |
    dotnet add ./${{ split(variables['Build.Repository.Name'],'/')[1] }}/${{ parameters.buildProjectPath }} package Microsoft.EntityFrameworkCore.Design --version 6.0.12
    dotnet tool install --global dotnet-ef --version 6.0.12
    dotnet ef migrations script --project ./${{ split(variables['Build.Repository.Name'],'/')[1] }}/${{ parameters.buildProjectPath }} --idempotent --context ${{ parameters.efcoreDbContext }} --output ./deploy/upgrade_schema.sql
  condition: ne('${{ parameters.efcoreDbContext }}', '')
  displayName: Generate SQL upgrade script

- powershell: |
    $ProjectDir = ${Env:BUILD_REPOSITORY_NAME}.Split("/")[1]
    New-Item -Name deploy -ItemType "Directory" -Force
    $DeployScript = Get-Content .\CommonDevops\deploy.ps1
    $DeployScript = ,('$BuildNumber = "' + $Env:BUILD_BUILDNUMBER + '"') + $DeployScript
    $DeployScript = ,('$BuildDate = "' + (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss") + '"') + $DeployScript
    $DeployScript = ,('$MainResourceName = "${{ parameters.terraformMainResource }}"') + $DeployScript
    $DeployScript = ,('$TerraformWebappName = "${{ parameters.terraformWebappName }}"') + $DeployScript
    $DeployScript = ,('$TerraformFunctionName = "${{ parameters.terraformFunctionName }}"') + $DeployScript
    $DeployScript = ,('$EfcoreTerraformDbName = "${{ parameters.EfcoreTerraformDbName }}"') + $DeployScript
    $DeployScript | Out-File ./deploy/deploy.ps1
    Copy-Item -Path "$ProjectDir\Terraform" -Destination "./deploy" -Recurse -Verbose
    New-Item "./deploy/CommonDevops" -ItemType Directory
    Copy-Item -Path "./CommonDevops/US" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item -Path "./CommonDevops/China" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item -Path "./CommonDevops/Korea" -Destination "./deploy/CommonDevops" -Recurse -Verbose
    Copy-Item "./CommonDevops/_terraform_init.ps1" -Destination "./deploy/CommonDevops"
    Copy-Item "./CommonDevops/common.tf" -Destination "./deploy/CommonDevops"
    Copy-Item -Path "Publish/*" -Destination "./deploy"
  displayName: Assemble the deployment package
  
- publish: ./deploy
  displayName: Publish artifact
  artifact: deploy
